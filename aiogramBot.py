import json
import time
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import Text
from main import collect_data
from aiogram.utils.markdown import hbold, hlink
import sqlite3

token = ''

bot = Bot(token= token, parse_mode=types.ParseMode.HTML)


dp = Dispatcher(bot)


@dp.message_handler(commands='start')
async def welcome_message(message: types.Message):

    #—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª—è–µ–º id
    def sql_start():
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()

        cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
            id INTEGER
        )""")

        connect.commit()
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

        people_id = message.chat.id
        cursor.execute(f"SELECT id FROM login_id WHERE id ={people_id}")

        data = cursor.fetchone()

        if data is None:
            user_id = [message.chat.id]
            cursor.execute("INSERT INTO login_id VALUES(?);", user_id)
            connect.commit()

    await bot.send_message(chat_id=message.chat.id, text=f'–ü—Ä–∏–≤–µ—Ç,{message.from_user.full_name}.‚úå\n'
                                                         f'–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—ã—Å–∫–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ Cs.money –ø–æ –≤–∫—É—Å–Ω–æ–π —Ü–µ–Ω–µ üí∞\n')




    sql_start()




    start_buttons = ['–ù–æ–∂–∏ üî™', '–ü–µ—Ä—á–∞—Ç–∫–∏ üññ', '–ü–∏—Å—Ç–æ–ª–µ—Ç—ãüî´', '–ü–∏—Å—Ç.–ø—É–ª–µ–º—ë—Ç—ã', '–í–∏–Ω—Ç–æ–≤–∫–∏ üçº', 'AWP ‚ò¢', '–î—Ä–æ–±–∞—à–∏ ‚ùå', '–ü—É–ª–µ–º—ë—Ç—ãüî≠', '–ö–ª—é—á–∏ üîë' ]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup= keyboard)

    await message.answer('–Ø –±—É–¥—É –∏—Å–∫–∞—Ç—å –≤–µ—â–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ -25%')






# —Ö–µ–Ω–¥–ª–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–∞–º–æ–º—É
@dp.message_handler(commands='delete')
async def delete_user(message: types.Message):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    people_id = message.chat.id

    cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
    connect.commit()

    #delite from table



#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–æ–∂–µ–π

@dp.message_handler(Text(equals='–ù–æ–∂–∏ üî™'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=2 , min=500 , max=800)

    with open('result.json') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')
            time.sleep(3)



        await message.answer(card)

#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä—á–∞—Ç–æ–∫

@dp.message_handler(Text(equals='–ü–µ—Ä—á–∞—Ç–∫–∏ üññ'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=13 , min=500 , max=2000)

    with open('result.json') as file:
        data = json.load(file)

    for index , item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')
            time.sleep(3)



        await message.answer(card)





#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤


@dp.message_handler(Text(equals='–ü–∏—Å—Ç–æ–ª–µ—Ç—ãüî´'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=5, min=20 , max=30)

    with open('result.json') as file:
        data = json.load(file)

    for index , item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')
            time.sleep(3)



        await message.answer(card)


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤ –ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º—ë—Ç—ã


@dp.message_handler(Text(equals='–ü–∏—Å—Ç.–ø—É–ª–µ–º—ë—Ç—ã'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=6, min=5 , max=10)

    with open('result.json') as file:
        data = json.load(file)

    for index , item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')
            time.sleep(3)



        await message.answer(card)




#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —à—Ç—É—Ä–º–æ–≤—ã—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫


@dp.message_handler(Text(equals='–í–∏–Ω—Ç–æ–≤–∫–∏ üçº'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=3, min=300 , max=500)

    with open('result.json') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')

            time.sleep(3)

        await message.answer(card)





#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫


@dp.message_handler(Text(equals='AWP ‚ò¢'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=4 , min=300 , max=500)

    with open('result.json') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')

            time.sleep(3)

        await message.answer(card)


# —Ö–µ–ª–¥–ª–µ—Ä –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–æ–≤


@dp.message_handler(Text(equals='–î—Ä–æ–±–∞—à–∏ ‚ùå'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=7, min=50 , max=80)

    with open('result.json') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')

            time.sleep(3)

        await message.answer(card)

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—É–ª–µ–º–µ—Ç–æ–≤


@dp.message_handler(Text(equals='–ü—É–ª–µ–º—ë—Ç—ãüî≠'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=8 , min=3 , max=8)

    with open('result.json') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')

            time.sleep(3)

        await message.answer(card)


#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–ª—é—á–µ–π

@dp.message_handler(Text(equals='–ö–ª—é—á–∏ üîë'))
async def get_discount_knives(message:types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    collect_data(cat_type=1)

    with open('result.json') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
            f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")} %\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'

        if index % 20 == 0 and index > 10:
            await message.answer('–ß—Ç–æ –±—ã –Ω–∞—Å –Ω–µ –∑–∞–ø–æ–¥–æ–∑—Ä–µ–ª–∏, —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ 3 —Å–µ–∫—É–Ω–¥—ã!')

            time.sleep(3)

        await message.answer(card)




#def main():
executor.start_polling(dp)
#
# if __name__ == '__main__':
#     main()

